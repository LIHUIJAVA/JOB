package com.px.mis.whs.util;

import java.math.BigDecimal;

/**
 * @author zhangxiaoyu
 * @version 创建时间：2018年11月16日 上午10:09:45
 * @ClassName 类名称
 * @Description 类描述
 */
public class BigDecimalchen {

    /**
     * 提供精确乘法运算的mul方法
     *
     * @param value1 被乘数
     * @param value2 乘数
     * @return 两个参数的积
     */
    public static double decimalNum(BigDecimal value1, BigDecimal value2) {

        return value1.multiply(value2).doubleValue();
    }


    public static double mul(double value1, double value2) {

        BigDecimal b1 = new BigDecimal(Double.valueOf(value1));
        BigDecimal b2 = new BigDecimal(Double.valueOf(value2));
        return b1.multiply(b2).doubleValue();
    }


    /**
     * 提供精确加法计算的add方法
     *
     * @param value1 被加数
     * @param value2 加数
     * @return 两个参数的和
     */

    public static double decimaljia(BigDecimal value1, BigDecimal value2) {

        return value1.add(value2).doubleValue();
    }


    public static double add(double value1, double value2) {
        BigDecimal b1 = new BigDecimal(Double.valueOf(value1));
        BigDecimal b2 = new BigDecimal(Double.valueOf(value2));
        return b1.add(b2).doubleValue();
    }

    /**
     * 提供精确减法运算的sub方法
     *
     * @param value1 被减数
     * @param value2 减数
     * @return 两个参数的差
     */

    public static double decimaljian(BigDecimal value1, BigDecimal value2) {

        return value1.subtract(value2).doubleValue();
    }

    public static double sub(double value1, double value2) {
        BigDecimal b1 = new BigDecimal(Double.valueOf(value1));
        BigDecimal b2 = new BigDecimal(Double.valueOf(value2));
        return b1.subtract(b2).doubleValue();
    }

    /**
     * 提供精确的除法运算方法div
     *
     * @param value1 被除数
     * @param value2 除数
     * @param scale  精确范围
     * @return 两个参数的商
     * @throws IllegalAccessException
     */
    public static double div(double value1, double value2, int scale) throws IllegalAccessException {
        //如果精确范围小于0，抛出异常信息
        if (scale < 0) {
            throw new IllegalAccessException("精确度不能小于0");
        }
        BigDecimal b1 = new BigDecimal(Double.valueOf(value1));
        BigDecimal b2 = new BigDecimal(Double.valueOf(value2));
        return b1.divide(b2, scale).doubleValue();
    }

    public static double decimalchu(BigDecimal value1, BigDecimal value2) {

        return value1.divide(value2).doubleValue();
    }


}
